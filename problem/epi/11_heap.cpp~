#include<iostream>
#include<queue>

using namespace std;

struct Compare { 
    bool operator()(const pair<int,int>& lhs, const pair<int,int>& rhs){
        return lhs.first < rhs.first;
    }
};

class Stack {
    public: 
        void Push(int x) { max_heap_.emplace(timestamp_++, x); }

        int Pop() {
            int val = max_heap_.top().second;
            max_heap_.pop();
            return val;
        }

        const int& Peak() const { return max_heap_.top().second; } 

    private:
        int timestamp_ = 0;
        priority_queue<pair<int,int>, vector<pair<int,int>>, Compare> max_heap_;
};

int main(){
   
    Stack s;
    s.Push(1);
    s.Push(2);
    s.Push(3);
    s.Push(4);
    cout << s.Pop() << endl;
    cout << s.Pop() << endl;
    cout << s.Pop() << endl;
    cout << s.Pop() << endl;
    
    return 0;
}
